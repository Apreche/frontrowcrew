"""
Django settings for frontrowcrew project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from pathlib import Path

from . import utils

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "FRONTROWCREW_SECRET_KEY",
    "django-insecure-gfzme-rm0l_7k_n)-$8yillmpe#mwlw@e&*l1%3(f^r4-ul=!=",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = utils.str_to_bool(os.environ.get("FRONTROWCREW_DEBUG", "False"))


ALLOWED_HOSTS = []
extra_hosts = os.environ.get("FRONTROWCREW_HOSTS", None)
if extra_hosts:
    ALLOWED_HOSTS += extra_hosts.split(",")
INTERNAL_IPS = ["127.0.0.1"]

SITE_ID = 1

# Application definition

INSTALLED_APPS = [
    # Django Apps
    "django.contrib.admin",
    "django.contrib.admindocs",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.flatpages",
    "django.contrib.messages",
    "django.contrib.redirects",
    "django.contrib.sessions",
    "django.contrib.sites",
    "django.contrib.staticfiles",
    # Third party apps
    "django_extensions",
    "django_readonly_field",
    "crispy_forms",
    "crispy_bootstrap5",
    "pagedown",  # The StackOverflow WYSIWYG Editor
    "procrastinate.contrib.django",
    "taggit",
    # First party apps
    "creator",
    "embeds",
    "etl",
    "media",
    "podcasts",
    "legacy_redirects",
    "shows",
    "syndicators",
]


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.contrib.admindocs.middleware.XViewMiddleware",
    "django.contrib.redirects.middleware.RedirectFallbackMiddleware",
    "django.contrib.flatpages.middleware.FlatpageFallbackMiddleware",
]

if DEBUG:
    INSTALLED_APPS += [
        "debug_toolbar",
    ]
    MIDDLEWARE = [
        "debug_toolbar.middleware.DebugToolbarMiddleware",
    ] + MIDDLEWARE

ROOT_URLCONF = "frontrowcrew.urls"
LOGIN_URL = "/admin/"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ["templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "shows.context_processors.navigation",
            ],
        },
    },
]

WSGI_APPLICATION = "frontrowcrew.wsgi.application"

DEFAULT_PROTOCOL = "http" if DEBUG else "https"
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("FRONTROWCREW_DB_NAME", "frontrowcrew"),
        "USER": os.environ.get("FRONTROWCREW_DB_USER", "frontrowcrew"),
        "PASSWORD": os.environ.get("FRONTROWCREW_DB_PASSWORD", "frontrowcrew"),
        "HOST": os.environ.get("FRONTROWCREW_DB_HOST", "localhost"),
        "PORT": os.environ.get("FRONTROWCREW_DB_PORT", "5432"),
    }
}

# Cache
if DEBUG and (os.environ.get("FRONTROWCREW_MEMCACHED_SOCKET", None) is None):
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.dummy.DummyCache",
        }
    }
else:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.memcached.PyLibMCCache",
            "LOCATION": os.environ.get(
                "FRONTROWCREW_MEMCACHED_SOCKET", "127.0.0.1:11211"
            ),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]
if DEBUG:
    AUTH_PASSWORD_VALIDATORS = []

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.ScryptPasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.ScryptPasswordHasher",
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en"

TIME_ZONE = "America/New_York"

USE_I18N = True

USE_L10N = True

USE_TZ = True

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"
STATIC_URL = os.environ.get("FRONTROWCREW_STATIC_URL", "/static/")
STATIC_ROOT = os.environ.get("FRONTROWCREW_STATIC_ROOT", "/tmp/static/")
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

# Media files (User Uploads)
# https://docs.djangoproject.com/en/3.2/topics/files/

MEDIA_URL = os.environ.get("FRONTROWCREW_MEDIA_URL", "/media/")
MEDIA_ROOT = os.environ.get("FRONTROWCREW_MEDIA_ROOT", "/tmp/media/")
AWS_STORAGE_BUCKET_NAME = os.environ.get("FRONTROWCREW_AWS_STORAGE_BUCKET_NAME", None)
if AWS_STORAGE_BUCKET_NAME is not None:
    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    AWS_QUERYSTRING_AUTH = False
    AWS_S3_FILE_OVERWRITE = False
    AWS_S3_VERIFY = True
    AWS_S3_ENDPOINT_URL = os.environ.get("FRONTROWCREW_AWS_S3_ENDPOINT_URL", None)
    AWS_S3_URL_PROTOCOL = os.environ.get("FRONTROWCREW_AWS_S3_URL_PROTOCOL", "https:")
    custom_domain = os.environ.get("FRONTROWCREW_AWS_S3_CUSTOM_DOMAIN", None)
    if custom_domain is not None:
        AWS_S3_CUSTOM_DOMAIN = custom_domain

# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "WARNING",
    },
}

# Django Email
admin_email = os.environ.get("FRONTROWCREW_ADMIN_EMAIL", "")
if admin_email:
    ADMINS = [("FRC Admin", admin_email)]
SERVER_EMAIL = os.environ.get("FRONTROWCREW_SERVER_EMAIL", "root@localhost")
DEFAULT_FROM_EMAIL = os.environ.get(
    "FRONTROWCREW_DEFAULT_FROM_EMAIL", "webmaster@localhost"
)
EMAIL_HOST = os.environ.get("FRONTROWCREW_EMAIL_HOST", "localhost")
EMAIL_HOST_PASSWORD = os.environ.get("FRONTROWCREW_EMAIL_HOST_PASSWORD", "")
EMAIL_HOST_USER = os.environ.get("FRONTROWCREW_EMAIL_HOST_USER", "")
EMAIL_PORT = int(os.environ.get("FRONTROWCREW_EMAIL_PORT", "25"))
EMAIL_SUBJECT_PREFIX = os.environ.get("FRONTROWCREW_EMAIL_SUBJECT_PREFIX", "[Django]")
EMAIL_USE_TLS = utils.str_to_bool(os.environ.get("FRONTROWCREW_EMAIL_USE_TLS", "False"))
EMAIL_USE_SSL = utils.str_to_bool(os.environ.get("FRONTROWCREW_EMAIL_USE_SSL", "False"))
EMAIL_SSL_CERTFILE = os.environ.get("FRONTROWCREW_EMAIL_SSL_CERTFILE", None)
EMAIL_SSL_KEYFILE = os.environ.get("FRONTROWCREW_EMAIL_SSL_KEYFILE", None)

# Taggit
TAGGIT_CASE_INSENSITIVE = True


# Crispy Forms
CRISPY_FAIL_SILENTLY = not DEBUG
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# IPython config for shell_plus
IPYTHON_ARGUMENTS = [
    "--no-confirm-exit",
    "--no-banner",
    "--ext=autoreload",
    "-c=%autoreload 2",
    "-i",
    "--",
]
